{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"provenance":[{"file_id":"1DHsmIEwaXUmfVT4tFzyOwyyfXAX0v6IF","timestamp":1681833478247},{"file_id":"1oNheYh5WbljxkvoK_BMkQTey2DWnFXMs","timestamp":1674856595373}]},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7847412,"sourceType":"datasetVersion","datasetId":4601457}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/ikram98ai/user-churn-prediction?scriptVersionId=204974618\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# **Waze Project**","metadata":{"id":"DtNBZFHO3M7n"}},{"cell_type":"markdown","source":"Buildind a machine learning model to predict user churn. To get the best results, I decide to build and test two tree-based models: random forest and XGBoost.\n\nThis will make informed business decisions to prevent user churn, improve user retention, and grow Wazeâ€™s business.\n\n\n","metadata":{"id":"XfCZ5KuI_2lT"}},{"cell_type":"markdown","source":"**The purpose** of this model is to find factors that drive user churn.\n\n**The goal** of this model is to predict whether or not a Waze user is retained or churned.","metadata":{"id":"rgSbVJvomcVa"}},{"cell_type":"markdown","source":"## **PACE: Plan**\n\n> _Waze will fail to take proactive measures to retain users who are likely to stop using the app. For example, Waze might proactively push an app notification to users, or send a survey to better understand user dissatisfaction._\n \n> _Waze may take proactive measures to retain users who are NOT likely to churn. This may lead to an annoying or negative experience for loyal users of the app._\n\n> _The proactive measueres taken by Waze might have unintended effects on users, and these effects might encourage user churn. Follow-up analysis on the effectiveness of the measures is recommended. If the measures are reasonable and effective, then the benefits will most likely outweigh the problems._","metadata":{"id":"E5g1A74r0ow_"}},{"cell_type":"markdown","source":"### **Imports and data loading**","metadata":{"id":"e8Vm3QEfGELS"}},{"cell_type":"code","source":"# Import packages for data manipulation\nimport numpy as np\nimport pandas as pd\n\n# Import packages for data visualization\nimport matplotlib.pyplot as plt\n\n# This lets us see all of the columns, preventing Juptyer from redacting them.\npd.set_option('display.max_columns', None)\n\n# Import packages for data modeling\nfrom sklearn.model_selection import train_test_split, PredefinedSplit\nfrom sklearn.metrics import roc_auc_score, roc_curve, auc\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score,\\\nf1_score, confusion_matrix, ConfusionMatrixDisplay, RocCurveDisplay, PrecisionRecallDisplay\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\n\nfrom skopt import BayesSearchCV\nfrom skopt.space import Real, Integer\n\n# This is the function that helps plot feature importance\nfrom xgboost import plot_importance\n\n# This module lets us save our models once we fit them.\nimport pickle\n\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"id":"fKhnX2Puf4Bt","execution":{"iopub.status.busy":"2024-11-03T10:51:20.529043Z","iopub.execute_input":"2024-11-03T10:51:20.529409Z","iopub.status.idle":"2024-11-03T10:51:22.248229Z","shell.execute_reply.started":"2024-11-03T10:51:20.52938Z","shell.execute_reply":"2024-11-03T10:51:22.247127Z"},"trusted":true},"outputs":[],"execution_count":1},{"cell_type":"code","source":"# Import dataset\ndf0 = pd.read_csv('/kaggle/input/waze-dataset/waze_dataset.csv')","metadata":{"id":"5weTXGKqa_iG","execution":{"iopub.status.busy":"2024-11-03T10:51:22.250293Z","iopub.execute_input":"2024-11-03T10:51:22.250905Z","iopub.status.idle":"2024-11-03T10:51:22.319615Z","shell.execute_reply.started":"2024-11-03T10:51:22.250864Z","shell.execute_reply":"2024-11-03T10:51:22.318546Z"},"trusted":true},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# Inspect the first five rows\ndf0.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":270},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1685765621766,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"t9u3R4HuFQIZ","outputId":"e31e9fe2-d641-41d6-ac62-350062762256","execution":{"iopub.status.busy":"2024-11-03T10:51:22.321054Z","iopub.execute_input":"2024-11-03T10:51:22.321497Z","iopub.status.idle":"2024-11-03T10:51:22.349927Z","shell.execute_reply.started":"2024-11-03T10:51:22.321461Z","shell.execute_reply":"2024-11-03T10:51:22.348801Z"},"trusted":true},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   ID     label  sessions  drives  total_sessions  n_days_after_onboarding  \\\n0   0  retained       283     226      296.748273                     2276   \n1   1  retained       133     107      326.896596                     1225   \n2   2  retained       114      95      135.522926                     2651   \n3   3  retained        49      40       67.589221                       15   \n4   4  retained        84      68      168.247020                     1562   \n\n   total_navigations_fav1  total_navigations_fav2  driven_km_drives  \\\n0                     208                       0       2628.845068   \n1                      19                      64      13715.920550   \n2                       0                       0       3059.148818   \n3                     322                       7        913.591123   \n4                     166                       5       3950.202008   \n\n   duration_minutes_drives  activity_days  driving_days   device  \n0              1985.775061             28            19  Android  \n1              3160.472914             13            11   iPhone  \n2              1610.735904             14             8  Android  \n3               587.196542              7             3   iPhone  \n4              1219.555924             27            18  Android  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>label</th>\n      <th>sessions</th>\n      <th>drives</th>\n      <th>total_sessions</th>\n      <th>n_days_after_onboarding</th>\n      <th>total_navigations_fav1</th>\n      <th>total_navigations_fav2</th>\n      <th>driven_km_drives</th>\n      <th>duration_minutes_drives</th>\n      <th>activity_days</th>\n      <th>driving_days</th>\n      <th>device</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>retained</td>\n      <td>283</td>\n      <td>226</td>\n      <td>296.748273</td>\n      <td>2276</td>\n      <td>208</td>\n      <td>0</td>\n      <td>2628.845068</td>\n      <td>1985.775061</td>\n      <td>28</td>\n      <td>19</td>\n      <td>Android</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>retained</td>\n      <td>133</td>\n      <td>107</td>\n      <td>326.896596</td>\n      <td>1225</td>\n      <td>19</td>\n      <td>64</td>\n      <td>13715.920550</td>\n      <td>3160.472914</td>\n      <td>13</td>\n      <td>11</td>\n      <td>iPhone</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>retained</td>\n      <td>114</td>\n      <td>95</td>\n      <td>135.522926</td>\n      <td>2651</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3059.148818</td>\n      <td>1610.735904</td>\n      <td>14</td>\n      <td>8</td>\n      <td>Android</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>retained</td>\n      <td>49</td>\n      <td>40</td>\n      <td>67.589221</td>\n      <td>15</td>\n      <td>322</td>\n      <td>7</td>\n      <td>913.591123</td>\n      <td>587.196542</td>\n      <td>7</td>\n      <td>3</td>\n      <td>iPhone</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>retained</td>\n      <td>84</td>\n      <td>68</td>\n      <td>168.247020</td>\n      <td>1562</td>\n      <td>166</td>\n      <td>5</td>\n      <td>3950.202008</td>\n      <td>1219.555924</td>\n      <td>27</td>\n      <td>18</td>\n      <td>Android</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"markdown","source":"## **PACE: Analyze**","metadata":{"id":"EgPRBjizg1oo"}},{"cell_type":"markdown","source":"### **Feature engineering**","metadata":{"id":"5VZowX9rhU1o"}},{"cell_type":"code","source":"# Copy the df0 dataframe\ndf = df0.copy()","metadata":{"id":"ZJsPbbPFMQe1","execution":{"iopub.status.busy":"2024-11-03T10:51:22.352472Z","iopub.execute_input":"2024-11-03T10:51:22.352835Z","iopub.status.idle":"2024-11-03T10:51:22.358686Z","shell.execute_reply.started":"2024-11-03T10:51:22.352803Z","shell.execute_reply":"2024-11-03T10:51:22.357396Z"},"trusted":true},"outputs":[],"execution_count":4},{"cell_type":"code","source":"df.info()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1685765626095,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"mBOSW8IDbO_d","outputId":"b543ff3a-9e18-474d-a0cb-8ff9c5306235","execution":{"iopub.status.busy":"2024-11-03T10:51:22.359779Z","iopub.execute_input":"2024-11-03T10:51:22.360169Z","iopub.status.idle":"2024-11-03T10:51:22.393388Z","shell.execute_reply.started":"2024-11-03T10:51:22.36013Z","shell.execute_reply":"2024-11-03T10:51:22.39216Z"},"trusted":true},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14999 entries, 0 to 14998\nData columns (total 13 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   ID                       14999 non-null  int64  \n 1   label                    14299 non-null  object \n 2   sessions                 14999 non-null  int64  \n 3   drives                   14999 non-null  int64  \n 4   total_sessions           14999 non-null  float64\n 5   n_days_after_onboarding  14999 non-null  int64  \n 6   total_navigations_fav1   14999 non-null  int64  \n 7   total_navigations_fav2   14999 non-null  int64  \n 8   driven_km_drives         14999 non-null  float64\n 9   duration_minutes_drives  14999 non-null  float64\n 10  activity_days            14999 non-null  int64  \n 11  driving_days             14999 non-null  int64  \n 12  device                   14999 non-null  object \ndtypes: float64(3), int64(8), object(2)\nmemory usage: 1.5+ MB\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"#### **`km_per_driving_day`**\n","metadata":{"id":"zA8NHyLDIpeT"}},{"cell_type":"code","source":"# 1. Create `km_per_driving_day` feature\ndf['km_per_driving_day'] = df['driven_km_drives'] / df['driving_days']\n\n# 2. Get descriptive stats\ndf['km_per_driving_day'].describe()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":300,"status":"ok","timestamp":1685765628722,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"PzqACNPlIMFi","outputId":"4502cb7b-c9fd-4407-c40f-e33f9556ceae","execution":{"iopub.status.busy":"2024-11-03T10:51:22.394576Z","iopub.execute_input":"2024-11-03T10:51:22.394905Z","iopub.status.idle":"2024-11-03T10:51:22.411103Z","shell.execute_reply.started":"2024-11-03T10:51:22.394876Z","shell.execute_reply":"2024-11-03T10:51:22.410001Z"},"trusted":true},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"count    1.499900e+04\nmean              inf\nstd               NaN\nmin      3.022063e+00\n25%      1.672804e+02\n50%      3.231459e+02\n75%      7.579257e+02\nmax               inf\nName: km_per_driving_day, dtype: float64"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"# 1. Convert infinite values to zero\ndf.loc[df['km_per_driving_day']==np.inf, 'km_per_driving_day'] = 0\n\n# 2. Confirm that it worked\ndf['km_per_driving_day'].describe()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1685765630162,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"pl_hHhfauh00","outputId":"51f5522c-f95a-4df5-e781-133c1578893e","execution":{"iopub.status.busy":"2024-11-03T10:51:22.412601Z","iopub.execute_input":"2024-11-03T10:51:22.413024Z","iopub.status.idle":"2024-11-03T10:51:22.428068Z","shell.execute_reply.started":"2024-11-03T10:51:22.412985Z","shell.execute_reply":"2024-11-03T10:51:22.426821Z"},"trusted":true},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"count    14999.000000\nmean       578.963113\nstd       1030.094384\nmin          0.000000\n25%        136.238895\n50%        272.889272\n75%        558.686918\nmax      15420.234110\nName: km_per_driving_day, dtype: float64"},"metadata":{}}],"execution_count":7},{"cell_type":"markdown","source":"#### **`percent_sessions_in_last_month`**\n","metadata":{"id":"-vZMI319M5ER"}},{"cell_type":"code","source":"# 1. Create `percent_sessions_in_last_month` feature\ndf['percent_sessions_in_last_month'] = df['sessions'] / df['total_sessions']\n\n# 2. Get descriptive stats\ndf['percent_sessions_in_last_month'].describe()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1685765631845,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"ZvT74d1EIMDo","outputId":"e1d1fbdf-c542-44b5-9af5-2233e034d6af","execution":{"iopub.status.busy":"2024-11-03T10:51:22.429391Z","iopub.execute_input":"2024-11-03T10:51:22.42982Z","iopub.status.idle":"2024-11-03T10:51:22.444225Z","shell.execute_reply.started":"2024-11-03T10:51:22.429784Z","shell.execute_reply":"2024-11-03T10:51:22.44281Z"},"trusted":true},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"count    14999.000000\nmean         0.449255\nstd          0.286919\nmin          0.000000\n25%          0.196221\n50%          0.423097\n75%          0.687216\nmax          1.530637\nName: percent_sessions_in_last_month, dtype: float64"},"metadata":{}}],"execution_count":8},{"cell_type":"markdown","source":"#### **`professional_driver`**","metadata":{"id":"XP5xpoWqNbUC"}},{"cell_type":"code","source":"# Create `professional_driver` feature\ndf['professional_driver'] = np.where((df['drives'] >= 60) & (df['driving_days'] >= 15), 1, 0)","metadata":{"id":"ZNmJdqJWIMBi","execution":{"iopub.status.busy":"2024-11-03T10:51:22.445865Z","iopub.execute_input":"2024-11-03T10:51:22.44629Z","iopub.status.idle":"2024-11-03T10:51:22.453775Z","shell.execute_reply.started":"2024-11-03T10:51:22.446252Z","shell.execute_reply":"2024-11-03T10:51:22.452749Z"},"trusted":true},"outputs":[],"execution_count":9},{"cell_type":"markdown","source":"#### **`total_sessions_per_day`**","metadata":{"id":"D6Rz587QOCUN"}},{"cell_type":"code","source":"# Create `total_sessions_per_day` feature\ndf['total_sessions_per_day'] = df['total_sessions'] / df['n_days_after_onboarding']","metadata":{"id":"NTlzoBQqNaaZ","execution":{"iopub.status.busy":"2024-11-03T10:51:22.457642Z","iopub.execute_input":"2024-11-03T10:51:22.458479Z","iopub.status.idle":"2024-11-03T10:51:22.464961Z","shell.execute_reply.started":"2024-11-03T10:51:22.458435Z","shell.execute_reply":"2024-11-03T10:51:22.463796Z"},"trusted":true},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# Get descriptive stats\ndf['total_sessions_per_day'].describe()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":407,"status":"ok","timestamp":1685765644809,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"QZlkvYzJvUXu","outputId":"8a8e5c3a-5c20-407e-8bf3-d03db79f8ead","execution":{"iopub.status.busy":"2024-11-03T10:51:22.466285Z","iopub.execute_input":"2024-11-03T10:51:22.46659Z","iopub.status.idle":"2024-11-03T10:51:22.480209Z","shell.execute_reply.started":"2024-11-03T10:51:22.466565Z","shell.execute_reply":"2024-11-03T10:51:22.479001Z"},"trusted":true},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"count    14999.000000\nmean         0.338698\nstd          1.314333\nmin          0.000298\n25%          0.051037\n50%          0.100775\n75%          0.216269\nmax         39.763874\nName: total_sessions_per_day, dtype: float64"},"metadata":{}}],"execution_count":11},{"cell_type":"markdown","source":"#### **`km_per_hour`**\n","metadata":{"id":"wlIGrAfTPr1T"}},{"cell_type":"code","source":"# Create `km_per_hour` feature\ndf['km_per_hour'] = df['driven_km_drives'] / (df['duration_minutes_drives'] / 60)\ndf['km_per_hour'].describe()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":310,"status":"ok","timestamp":1685765646463,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"BCo9ddW0P2rm","outputId":"2d749be4-d14a-4720-932d-25e0daad9975","execution":{"iopub.status.busy":"2024-11-03T10:51:22.481827Z","iopub.execute_input":"2024-11-03T10:51:22.482206Z","iopub.status.idle":"2024-11-03T10:51:22.49883Z","shell.execute_reply.started":"2024-11-03T10:51:22.482177Z","shell.execute_reply":"2024-11-03T10:51:22.497503Z"},"trusted":true},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"count    14999.000000\nmean       190.394608\nstd        334.674026\nmin         72.013095\n25%         90.706222\n50%        122.382022\n75%        193.130119\nmax      23642.920871\nName: km_per_hour, dtype: float64"},"metadata":{}}],"execution_count":12},{"cell_type":"markdown","source":"These numbers are obviously problematic, and it would be worthwhile to seek clarification from Waze regarding how these features are collected to better understand why such unrealistic speeds are observed.","metadata":{}},{"cell_type":"markdown","source":"#### **`km_per_drive`**","metadata":{"id":"VnFLfrleQat0"}},{"cell_type":"code","source":"# Create `km_per_drive` feature\ndf['km_per_drive'] = df['driven_km_drives'] / df['drives']\ndf['km_per_drive'].describe()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":287,"status":"ok","timestamp":1685765649546,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"qP-lBOZtQKH1","outputId":"7f655917-91d9-4667-ebb9-871bdd04120b","execution":{"iopub.status.busy":"2024-11-03T10:51:22.500228Z","iopub.execute_input":"2024-11-03T10:51:22.501201Z","iopub.status.idle":"2024-11-03T10:51:22.51416Z","shell.execute_reply.started":"2024-11-03T10:51:22.501167Z","shell.execute_reply":"2024-11-03T10:51:22.513008Z"},"trusted":true},"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"count    1.499900e+04\nmean              inf\nstd               NaN\nmin      1.008775e+00\n25%      3.323065e+01\n50%      7.488006e+01\n75%      1.854667e+02\nmax               inf\nName: km_per_drive, dtype: float64"},"metadata":{}}],"execution_count":13},{"cell_type":"code","source":"# 1. Convert infinite values to zero\ndf.loc[df['km_per_drive']==np.inf, 'km_per_drive'] = 0\n\n# 2. Confirm that it worked\ndf['km_per_drive'].describe()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":275,"status":"ok","timestamp":1685765656668,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"HI0h4g2N1aE9","outputId":"f4771080-1e29-4a96-97b2-750016ac3767","execution":{"iopub.status.busy":"2024-11-03T10:51:22.515818Z","iopub.execute_input":"2024-11-03T10:51:22.51618Z","iopub.status.idle":"2024-11-03T10:51:22.532303Z","shell.execute_reply.started":"2024-11-03T10:51:22.516149Z","shell.execute_reply":"2024-11-03T10:51:22.530967Z"},"trusted":true},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"count    14999.000000\nmean       232.817946\nstd        620.622351\nmin          0.000000\n25%         32.424301\n50%         72.854343\n75%        179.347527\nmax      15777.426560\nName: km_per_drive, dtype: float64"},"metadata":{}}],"execution_count":14},{"cell_type":"markdown","source":"#### **`percent_of_sessions_to_favorite`**","metadata":{"id":"QhvumW3dRLVw"}},{"cell_type":"code","source":"# Create `percent_of_sessions_to_favorite` feature\ndf['percent_of_drives_to_favorite'] = (\n    df['total_navigations_fav1'] + df['total_navigations_fav2']) / df['total_sessions']\n\n# Get descriptive stats\ndf['percent_of_drives_to_favorite'].describe()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":248,"status":"ok","timestamp":1685765660401,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"3VQvevYeRK0u","outputId":"63b0de1d-c30a-4485-acc2-de4797896dd7","execution":{"iopub.status.busy":"2024-11-03T10:51:22.534155Z","iopub.execute_input":"2024-11-03T10:51:22.534615Z","iopub.status.idle":"2024-11-03T10:51:22.549694Z","shell.execute_reply.started":"2024-11-03T10:51:22.534573Z","shell.execute_reply":"2024-11-03T10:51:22.548422Z"},"trusted":true},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"count    14999.000000\nmean         1.665439\nstd          8.865666\nmin          0.000000\n25%          0.203471\n50%          0.649818\n75%          1.638526\nmax        777.563629\nName: percent_of_drives_to_favorite, dtype: float64"},"metadata":{}}],"execution_count":15},{"cell_type":"markdown","source":"### **Drop missing values**","metadata":{"id":"gZ0zDWmsTeOA"}},{"cell_type":"code","source":"# Drop rows with missing values\ndf = df.dropna(subset=['label'])","metadata":{"id":"teUeCF-yf_6o","execution":{"iopub.status.busy":"2024-11-03T10:51:22.551422Z","iopub.execute_input":"2024-11-03T10:51:22.551783Z","iopub.status.idle":"2024-11-03T10:51:22.566365Z","shell.execute_reply.started":"2024-11-03T10:51:22.551744Z","shell.execute_reply":"2024-11-03T10:51:22.565414Z"},"trusted":true},"outputs":[],"execution_count":16},{"cell_type":"markdown","source":"### **Variable encoding**","metadata":{"id":"uFnVVQ_OTpqz"}},{"cell_type":"markdown","source":"#### **Dummying features**","metadata":{"id":"o3ArC_5xa7Oi"}},{"cell_type":"code","source":"# Create new `device2` variable\ndf['device2'] = np.where(df['device']=='Android', 0, 1)\ndf[['device', 'device2']].tail()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":304,"status":"ok","timestamp":1685765686284,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"QvDpwcQm0f35","outputId":"f4f36452-731a-403d-e109-a02df1520db7","execution":{"iopub.status.busy":"2024-11-03T10:51:22.567878Z","iopub.execute_input":"2024-11-03T10:51:22.568381Z","iopub.status.idle":"2024-11-03T10:51:22.582748Z","shell.execute_reply.started":"2024-11-03T10:51:22.568348Z","shell.execute_reply":"2024-11-03T10:51:22.581632Z"},"trusted":true},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"        device  device2\n14994   iPhone        1\n14995  Android        0\n14996   iPhone        1\n14997   iPhone        1\n14998   iPhone        1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>device</th>\n      <th>device2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>14994</th>\n      <td>iPhone</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>14995</th>\n      <td>Android</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14996</th>\n      <td>iPhone</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>14997</th>\n      <td>iPhone</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>14998</th>\n      <td>iPhone</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":17},{"cell_type":"markdown","source":"#### **Target encoding**","metadata":{"id":"UV3KLq7LpcWB"}},{"cell_type":"code","source":"# Create binary `label2` column\ndf['label2'] = np.where(df['label']=='churned', 1, 0)\ndf[['label', 'label2']].tail()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1685765692665,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"7fRaU2JKpyXg","outputId":"05eb3516-2c5f-44b3-b453-8a3fcdec8941","execution":{"iopub.status.busy":"2024-11-03T10:51:22.58461Z","iopub.execute_input":"2024-11-03T10:51:22.585055Z","iopub.status.idle":"2024-11-03T10:51:22.605478Z","shell.execute_reply.started":"2024-11-03T10:51:22.585014Z","shell.execute_reply":"2024-11-03T10:51:22.604052Z"},"trusted":true},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"          label  label2\n14994  retained       0\n14995  retained       0\n14996  retained       0\n14997   churned       1\n14998  retained       0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>label</th>\n      <th>label2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>14994</th>\n      <td>retained</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14995</th>\n      <td>retained</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14996</th>\n      <td>retained</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14997</th>\n      <td>churned</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>14998</th>\n      <td>retained</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":18},{"cell_type":"markdown","source":"### **Feature selection**","metadata":{"id":"MSqM4oiyuuzw"}},{"cell_type":"code","source":"# Drop `ID` column\ndf = df.drop(['ID'], axis=1)","metadata":{"id":"vv3owriWuuDQ","execution":{"iopub.status.busy":"2024-11-03T10:51:22.607535Z","iopub.execute_input":"2024-11-03T10:51:22.608394Z","iopub.status.idle":"2024-11-03T10:51:22.616559Z","shell.execute_reply.started":"2024-11-03T10:51:22.608334Z","shell.execute_reply":"2024-11-03T10:51:22.615429Z"},"trusted":true},"outputs":[],"execution_count":19},{"cell_type":"markdown","source":"### **Evaluation metric**","metadata":{"id":"nZfNE37b-LlJ"}},{"cell_type":"code","source":"# Get class balance of 'label' col\ndf['label'].value_counts(normalize=True)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":254,"status":"ok","timestamp":1685765707119,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"4mRefXCF-K_c","outputId":"4a0f5d9c-cd7a-4548-d607-5388d68c906e","execution":{"iopub.status.busy":"2024-11-03T10:51:22.617931Z","iopub.execute_input":"2024-11-03T10:51:22.618274Z","iopub.status.idle":"2024-11-03T10:51:22.634217Z","shell.execute_reply.started":"2024-11-03T10:51:22.618245Z","shell.execute_reply":"2024-11-03T10:51:22.6331Z"},"trusted":true},"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"label\nretained    0.822645\nchurned     0.177355\nName: proportion, dtype: float64"},"metadata":{}}],"execution_count":20},{"cell_type":"markdown","source":"Approximately 18% of the users in this dataset churned. This is an unbalanced dataset, but not extremely so. It can be modeled without any class rebalancing.\n\nIt was already determined that the risks involved in making a false positive prediction are minimal. No one stands to get hurt, lose money, or suffer any other significant consequence if they are predicted to churn. Therefore, select the model based on the recall score.","metadata":{"id":"jRehfuoyi6I2"}},{"cell_type":"markdown","source":"## **PACE: Construct**","metadata":{"id":"3n1eikFh8akS"}},{"cell_type":"markdown","source":"### **Modeling workflow and model selection process**\n\n1. Split the data into train/validation/test sets (60/20/20)\n2. Fit models and tune hyperparameters on the training set\n3. Perform final model selection on the validation set\n4. Assess the champion model's performance on the test set\n","metadata":{"id":"G5jzGjOS8iiv"}},{"cell_type":"markdown","source":"### **Split the data**","metadata":{"id":"Nx41bVxX89Fe"}},{"cell_type":"code","source":"# 1. Isolate X variables\nX = df.drop(columns=['label', 'label2', 'device'])\n\n# 2. Isolate y variable\ny = df['label2']\n\n# 3. Split into train and test sets\nX_tr, X_test, y_tr, y_test = train_test_split(X, y, stratify=y,\n                                              test_size=0.2, random_state=42)\n\n# 4. Split into train and validate sets\nX_train, X_val, y_train, y_val = train_test_split(X_tr, y_tr, stratify=y_tr,\n                                                  test_size=0.25, random_state=42)","metadata":{"id":"qLbapbSWDUL-","execution":{"iopub.status.busy":"2024-11-03T10:51:22.635801Z","iopub.execute_input":"2024-11-03T10:51:22.636781Z","iopub.status.idle":"2024-11-03T10:51:22.668397Z","shell.execute_reply.started":"2024-11-03T10:51:22.636719Z","shell.execute_reply":"2024-11-03T10:51:22.667236Z"},"trusted":true},"outputs":[],"execution_count":21},{"cell_type":"code","source":"for x in [X_train, X_val, X_test]:\n    print(len(x))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1685765715636,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"QmUF9qGdq3RO","outputId":"f971e6b3-1b47-4f5a-8564-693091b5acbb","execution":{"iopub.status.busy":"2024-11-03T10:51:22.669756Z","iopub.execute_input":"2024-11-03T10:51:22.670098Z","iopub.status.idle":"2024-11-03T10:51:22.676191Z","shell.execute_reply.started":"2024-11-03T10:51:22.670066Z","shell.execute_reply":"2024-11-03T10:51:22.674772Z"},"trusted":true},"outputs":[{"name":"stdout","text":"8579\n2860\n2860\n","output_type":"stream"}],"execution_count":22},{"cell_type":"markdown","source":"### **Modeling**","metadata":{"id":"fCHCDdW3swPj"}},{"cell_type":"markdown","source":"#### **Random forest**","metadata":{"id":"vynZs5het1b_"}},{"cell_type":"code","source":"# 1. Instantiate the random forest classifier\nrf = RandomForestClassifier(random_state=42)\n\n# 2. Create a dictionary of hyperparameters to tune\ncv_params = {'max_depth': Integer(2,10),\n             'max_features': Integer(2,10),\n             'max_samples': Real(0.1,0.9),\n             'min_samples_leaf': Integer(1,10),\n             'min_samples_split': Integer(2,10),\n             'n_estimators': Integer(50,1000),\n             }\n\n# 3. Define a dictionary of scoring metrics to capture\nscoring = ['accuracy', 'precision', 'recall', 'f1']\n\n# 4. Instantiate the GridSearchCV object\nrf_cv = BayesSearchCV(rf, cv_params,n_iter=10,n_jobs=-1, scoring=scoring, cv=4, refit='recall')","metadata":{"id":"Vj5rJWOv5O3d","execution":{"iopub.status.busy":"2024-11-03T10:51:22.677698Z","iopub.execute_input":"2024-11-03T10:51:22.678211Z","iopub.status.idle":"2024-11-03T10:51:22.693799Z","shell.execute_reply.started":"2024-11-03T10:51:22.678161Z","shell.execute_reply":"2024-11-03T10:51:22.692643Z"},"trusted":true},"outputs":[],"execution_count":23},{"cell_type":"code","source":"%%time\nrf_cv.fit(X_train, y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":152},"executionInfo":{"elapsed":119330,"status":"ok","timestamp":1685765843795,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"OXuBiTGi5ZHn","outputId":"d3cc06bc-a926-4154-fa37-38a8abc2cf78","trusted":true,"execution":{"iopub.status.busy":"2024-11-03T10:51:22.695257Z","iopub.execute_input":"2024-11-03T10:51:22.695676Z","iopub.status.idle":"2024-11-03T10:53:02.331258Z","shell.execute_reply.started":"2024-11-03T10:51:22.69564Z","shell.execute_reply":"2024-11-03T10:53:02.330057Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"CPU times: user 16.4 s, sys: 1.67 s, total: 18 s\nWall time: 1min 39s\n","output_type":"stream"},{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"BayesSearchCV(cv=4, estimator=RandomForestClassifier(random_state=42),\n              n_iter=10, n_jobs=-1, refit='recall',\n              scoring=['accuracy', 'precision', 'recall', 'f1'],\n              search_spaces={'max_depth': Integer(low=2, high=10, prior='uniform', transform='normalize'),\n                             'max_features': Integer(low=2, high=10, prior='uniform', transform='normalize'),\n                             'max_samples': Real(low=0.1, high=0.9, prior='uniform', transform='normalize'),\n                             'min_samples_leaf': Integer(low=1, high=10, prior='uniform', transform='normalize'),\n                             'min_samples_split': Integer(low=2, high=10, prior='uniform', transform='normalize'),\n                             'n_estimators': Integer(low=50, high=1000, prior='uniform', transform='normalize')})","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>BayesSearchCV(cv=4, estimator=RandomForestClassifier(random_state=42),\n              n_iter=10, n_jobs=-1, refit=&#x27;recall&#x27;,\n              scoring=[&#x27;accuracy&#x27;, &#x27;precision&#x27;, &#x27;recall&#x27;, &#x27;f1&#x27;],\n              search_spaces={&#x27;max_depth&#x27;: Integer(low=2, high=10, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;max_features&#x27;: Integer(low=2, high=10, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;max_samples&#x27;: Real(low=0.1, high=0.9, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;min_samples_leaf&#x27;: Integer(low=1, high=10, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;min_samples_split&#x27;: Integer(low=2, high=10, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;n_estimators&#x27;: Integer(low=50, high=1000, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;)})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">BayesSearchCV</label><div class=\"sk-toggleable__content\"><pre>BayesSearchCV(cv=4, estimator=RandomForestClassifier(random_state=42),\n              n_iter=10, n_jobs=-1, refit=&#x27;recall&#x27;,\n              scoring=[&#x27;accuracy&#x27;, &#x27;precision&#x27;, &#x27;recall&#x27;, &#x27;f1&#x27;],\n              search_spaces={&#x27;max_depth&#x27;: Integer(low=2, high=10, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;max_features&#x27;: Integer(low=2, high=10, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;max_samples&#x27;: Real(low=0.1, high=0.9, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;min_samples_leaf&#x27;: Integer(low=1, high=10, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;min_samples_split&#x27;: Integer(low=2, high=10, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;n_estimators&#x27;: Integer(low=50, high=1000, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;)})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":24},{"cell_type":"code","source":"# Examine best score\nrf_cv.best_score_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":252,"status":"ok","timestamp":1685765857251,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"29kGUegqhviL","outputId":"4d8f983e-56c5-4972-e346-f4fc1d8abf7f","execution":{"iopub.status.busy":"2024-11-03T10:53:02.332789Z","iopub.execute_input":"2024-11-03T10:53:02.333112Z","iopub.status.idle":"2024-11-03T10:53:02.34064Z","shell.execute_reply.started":"2024-11-03T10:53:02.333078Z","shell.execute_reply":"2024-11-03T10:53:02.339261Z"},"trusted":true},"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"0.07225790855090483"},"metadata":{}}],"execution_count":25},{"cell_type":"code","source":"# Examine best hyperparameter combo\nrf_cv.best_params_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":262,"status":"ok","timestamp":1685765859250,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"FjgXbO7Kh8is","outputId":"71f45fbc-3809-4c52-f381-1b7ff28485fb","execution":{"iopub.status.busy":"2024-11-03T10:53:02.3423Z","iopub.execute_input":"2024-11-03T10:53:02.343034Z","iopub.status.idle":"2024-11-03T10:53:02.351556Z","shell.execute_reply.started":"2024-11-03T10:53:02.342993Z","shell.execute_reply":"2024-11-03T10:53:02.350537Z"},"trusted":true},"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"OrderedDict([('max_depth', 9),\n             ('max_features', 9),\n             ('max_samples', 0.21505461821222602),\n             ('min_samples_leaf', 7),\n             ('min_samples_split', 3),\n             ('n_estimators', 998)])"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"def make_results(model_name:str, model_object, metric:str):\n    # Create dictionary that maps input metric to actual metric name in GridSearchCV\n    metric_dict = {'precision': 'mean_test_precision',\n                   'recall': 'mean_test_recall',\n                   'f1': 'mean_test_f1',\n                   'accuracy': 'mean_test_accuracy',\n                   }\n\n    # Get all the results from the CV and put them in a df\n    cv_results = pd.DataFrame(model_object.cv_results_)\n\n    # Isolate the row of the df with the max(metric) score\n    best_estimator_results = cv_results.iloc[cv_results[metric_dict[metric]].idxmax(), :]\n\n    # Extract accuracy, precision, recall, and f1 score from that row\n    f1 = best_estimator_results.mean_test_f1\n    recall = best_estimator_results.mean_test_recall\n    precision = best_estimator_results.mean_test_precision\n    accuracy = best_estimator_results.mean_test_accuracy\n\n    # Create table of results\n    table = pd.DataFrame({'model': [model_name],\n                          'precision': [precision],\n                          'recall': [recall],\n                          'F1': [f1],\n                          'accuracy': [accuracy],\n                          },\n                         )\n\n    return table","metadata":{"id":"u-UodWEOedxz","execution":{"iopub.status.busy":"2024-11-03T10:53:02.352799Z","iopub.execute_input":"2024-11-03T10:53:02.353112Z","iopub.status.idle":"2024-11-03T10:53:02.362503Z","shell.execute_reply.started":"2024-11-03T10:53:02.353086Z","shell.execute_reply":"2024-11-03T10:53:02.361511Z"},"trusted":true},"outputs":[],"execution_count":27},{"cell_type":"code","source":"results = make_results('RF cv', rf_cv, 'recall')\nresults","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"executionInfo":{"elapsed":293,"status":"ok","timestamp":1685765867327,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"qAYb2QigiT_h","outputId":"11251365-28e6-4ffc-dee6-8b43d586370f","execution":{"iopub.status.busy":"2024-11-03T10:53:02.369476Z","iopub.execute_input":"2024-11-03T10:53:02.369847Z","iopub.status.idle":"2024-11-03T10:53:02.388214Z","shell.execute_reply.started":"2024-11-03T10:53:02.369816Z","shell.execute_reply":"2024-11-03T10:53:02.386876Z"},"trusted":true},"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"   model  precision    recall        F1  accuracy\n0  RF cv    0.57277  0.072258  0.127872   0.82562","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>model</th>\n      <th>precision</th>\n      <th>recall</th>\n      <th>F1</th>\n      <th>accuracy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>RF cv</td>\n      <td>0.57277</td>\n      <td>0.072258</td>\n      <td>0.127872</td>\n      <td>0.82562</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":28},{"cell_type":"markdown","source":"#### **XGBoost**","metadata":{"id":"DOlktJ6l4Tgt"}},{"cell_type":"code","source":"xgb_clf = XGBClassifier(random_state=42)\nparams = { \n            'learning_rate': Real(0.001,0.3,prior='log-uniform'),\n            'max_depth': Integer(2,6,prior='uniform'),\n            'min_child_weight':Real(0.01,.99,prior='log-uniform'),\n            'n_estimators': Integer(50,500,prior='uniform'),\n            'colsample_bytree':Real(0.01,.99,prior='log-uniform'),\n            'subsample': Real(0.01,.99,prior='log-uniform'),\n            'reg_alpha':Real(0.0001,2,prior='log-uniform'),\n            'reg_lambda': Real(0.0001,2,prior='log-uniform'),\n        }\nxgb_cv = BayesSearchCV(xgb_clf,params,n_iter=10,n_jobs=-1,scoring=scoring, cv=4, refit='recall')","metadata":{"id":"0ciO48nhiTqO","execution":{"iopub.status.busy":"2024-11-03T10:53:02.389771Z","iopub.execute_input":"2024-11-03T10:53:02.39022Z","iopub.status.idle":"2024-11-03T10:53:02.407294Z","shell.execute_reply.started":"2024-11-03T10:53:02.390189Z","shell.execute_reply":"2024-11-03T10:53:02.405979Z"},"trusted":true},"outputs":[],"execution_count":29},{"cell_type":"code","source":"%%time\nxgb_cv.fit(X_train, y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":152},"executionInfo":{"elapsed":183399,"status":"ok","timestamp":1685766062607,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"dYCWs_HX6804","outputId":"1b2eee5e-5efe-4cc4-ce38-5ad525bd12f5","execution":{"iopub.status.busy":"2024-11-03T10:53:02.40895Z","iopub.execute_input":"2024-11-03T10:53:02.409409Z","iopub.status.idle":"2024-11-03T10:53:12.661939Z","shell.execute_reply.started":"2024-11-03T10:53:02.409368Z","shell.execute_reply":"2024-11-03T10:53:12.660745Z"},"trusted":true,"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"CPU times: user 3.48 s, sys: 1.57 s, total: 5.05 s\nWall time: 10.2 s\n","output_type":"stream"},{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"BayesSearchCV(cv=4,\n              estimator=XGBClassifier(base_score=None, booster=None,\n                                      callbacks=None, colsample_bylevel=None,\n                                      colsample_bynode=None,\n                                      colsample_bytree=None, device=None,\n                                      early_stopping_rounds=None,\n                                      enable_categorical=False,\n                                      eval_metric=None, feature_types=None,\n                                      gamma=None, grow_policy=None,\n                                      importance_type=None,\n                                      interaction_constraints=None,\n                                      learning_rate=None...\n                             'min_child_weight': Real(low=0.01, high=0.99, prior='log-uniform', transform='normalize'),\n                             'n_estimators': Integer(low=50, high=500, prior='uniform', transform='normalize'),\n                             'reg_alpha': Real(low=0.0001, high=2, prior='log-uniform', transform='normalize'),\n                             'reg_lambda': Real(low=0.0001, high=2, prior='log-uniform', transform='normalize'),\n                             'subsample': Real(low=0.01, high=0.99, prior='log-uniform', transform='normalize')})","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>BayesSearchCV(cv=4,\n              estimator=XGBClassifier(base_score=None, booster=None,\n                                      callbacks=None, colsample_bylevel=None,\n                                      colsample_bynode=None,\n                                      colsample_bytree=None, device=None,\n                                      early_stopping_rounds=None,\n                                      enable_categorical=False,\n                                      eval_metric=None, feature_types=None,\n                                      gamma=None, grow_policy=None,\n                                      importance_type=None,\n                                      interaction_constraints=None,\n                                      learning_rate=None...\n                             &#x27;min_child_weight&#x27;: Real(low=0.01, high=0.99, prior=&#x27;log-uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;n_estimators&#x27;: Integer(low=50, high=500, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;reg_alpha&#x27;: Real(low=0.0001, high=2, prior=&#x27;log-uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;reg_lambda&#x27;: Real(low=0.0001, high=2, prior=&#x27;log-uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;subsample&#x27;: Real(low=0.01, high=0.99, prior=&#x27;log-uniform&#x27;, transform=&#x27;normalize&#x27;)})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">BayesSearchCV</label><div class=\"sk-toggleable__content\"><pre>BayesSearchCV(cv=4,\n              estimator=XGBClassifier(base_score=None, booster=None,\n                                      callbacks=None, colsample_bylevel=None,\n                                      colsample_bynode=None,\n                                      colsample_bytree=None, device=None,\n                                      early_stopping_rounds=None,\n                                      enable_categorical=False,\n                                      eval_metric=None, feature_types=None,\n                                      gamma=None, grow_policy=None,\n                                      importance_type=None,\n                                      interaction_constraints=None,\n                                      learning_rate=None...\n                             &#x27;min_child_weight&#x27;: Real(low=0.01, high=0.99, prior=&#x27;log-uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;n_estimators&#x27;: Integer(low=50, high=500, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;reg_alpha&#x27;: Real(low=0.0001, high=2, prior=&#x27;log-uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;reg_lambda&#x27;: Real(low=0.0001, high=2, prior=&#x27;log-uniform&#x27;, transform=&#x27;normalize&#x27;),\n                             &#x27;subsample&#x27;: Real(low=0.01, high=0.99, prior=&#x27;log-uniform&#x27;, transform=&#x27;normalize&#x27;)})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=42, ...)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=42, ...)</pre></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":30},{"cell_type":"code","source":"# Examine best score\nxgb_cv.best_score_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":234,"status":"ok","timestamp":1685766070183,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"UFLTmIDm6805","outputId":"5ad34e0a-4d4f-4e19-ebbd-182e3841e5eb","trusted":true,"execution":{"iopub.status.busy":"2024-11-03T10:53:12.6637Z","iopub.execute_input":"2024-11-03T10:53:12.664086Z","iopub.status.idle":"2024-11-03T10:53:12.670783Z","shell.execute_reply.started":"2024-11-03T10:53:12.664057Z","shell.execute_reply":"2024-11-03T10:53:12.6696Z"}},"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"0.18396187318690427"},"metadata":{}}],"execution_count":31},{"cell_type":"code","source":"# Examine best parameters\nxgb_cv.best_params_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1685766072579,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"cdPUCuND6805","outputId":"c3b6a46d-8b01-44d7-cf23-3a858af9a124","trusted":true,"execution":{"iopub.status.busy":"2024-11-03T10:53:12.672361Z","iopub.execute_input":"2024-11-03T10:53:12.673326Z","iopub.status.idle":"2024-11-03T10:53:12.682199Z","shell.execute_reply.started":"2024-11-03T10:53:12.673288Z","shell.execute_reply":"2024-11-03T10:53:12.681104Z"}},"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"OrderedDict([('colsample_bytree', 0.2586362629421069),\n             ('learning_rate', 0.14436958486296436),\n             ('max_depth', 4),\n             ('min_child_weight', 0.4296262296436655),\n             ('n_estimators', 93),\n             ('reg_alpha', 0.002360071459347006),\n             ('reg_lambda', 0.8869487319606812),\n             ('subsample', 0.06963693152518538)])"},"metadata":{}}],"execution_count":32},{"cell_type":"code","source":"# Call 'make_results()' on the GridSearch object\nxgb_cv_results = make_results('XGB cv', xgb_cv, 'recall')\nresults = pd.concat([results, xgb_cv_results], axis=0)\nresults","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1685766074102,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"QL19dH2h7KdD","outputId":"8ce25a62-38aa-4f5a-adfe-b8ff1906b9ce","trusted":true,"execution":{"iopub.status.busy":"2024-11-03T10:53:12.683474Z","iopub.execute_input":"2024-11-03T10:53:12.683855Z","iopub.status.idle":"2024-11-03T10:53:12.702141Z","shell.execute_reply.started":"2024-11-03T10:53:12.683819Z","shell.execute_reply":"2024-11-03T10:53:12.701053Z"}},"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"    model  precision    recall        F1  accuracy\n0   RF cv   0.572770  0.072258  0.127872  0.825620\n0  XGB cv   0.392946  0.183962  0.250417  0.804639","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>model</th>\n      <th>precision</th>\n      <th>recall</th>\n      <th>F1</th>\n      <th>accuracy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>RF cv</td>\n      <td>0.572770</td>\n      <td>0.072258</td>\n      <td>0.127872</td>\n      <td>0.825620</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>XGB cv</td>\n      <td>0.392946</td>\n      <td>0.183962</td>\n      <td>0.250417</td>\n      <td>0.804639</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":33},{"cell_type":"markdown","source":"### **Model selection**","metadata":{"id":"MzY889AGI6-i"}},{"cell_type":"markdown","source":"#### **Random forest**","metadata":{"id":"Alc_1tAiJLPC"}},{"cell_type":"code","source":"# Use random forest model to predict on validation data\nrf_val_preds = rf_cv.best_estimator_.predict(X_val)","metadata":{"id":"azbWZb7uJJgq","trusted":true,"execution":{"iopub.status.busy":"2024-11-03T10:53:12.703884Z","iopub.execute_input":"2024-11-03T10:53:12.704302Z","iopub.status.idle":"2024-11-03T10:53:13.053853Z","shell.execute_reply.started":"2024-11-03T10:53:12.704266Z","shell.execute_reply":"2024-11-03T10:53:13.052312Z"}},"outputs":[],"execution_count":34},{"cell_type":"code","source":"def get_test_scores(model_name:str, preds, y_test_data):\n\n    accuracy = accuracy_score(y_test_data, preds)\n    precision = precision_score(y_test_data, preds)\n    recall = recall_score(y_test_data, preds)\n    f1 = f1_score(y_test_data, preds)\n\n    table = pd.DataFrame({'model': [model_name],\n                          'precision': [precision],\n                          'recall': [recall],\n                          'F1': [f1],\n                          'accuracy': [accuracy]\n                          })\n\n    return table","metadata":{"id":"-fQZSR3oKHpt","trusted":true,"execution":{"iopub.status.busy":"2024-11-03T10:53:13.055508Z","iopub.execute_input":"2024-11-03T10:53:13.055907Z","iopub.status.idle":"2024-11-03T10:53:13.062898Z","shell.execute_reply.started":"2024-11-03T10:53:13.055875Z","shell.execute_reply":"2024-11-03T10:53:13.061787Z"}},"outputs":[],"execution_count":35},{"cell_type":"code","source":"# Get validation scores for RF model\nrf_val_scores = get_test_scores('RF val', rf_val_preds, y_val)\n\n# Append to the results table\nresults = pd.concat([results, rf_val_scores], axis=0)\nresults","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1685766087199,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"DQqutB5oKTiR","outputId":"b2610818-a5f4-4b70-d621-2929fec96247","trusted":true,"execution":{"iopub.status.busy":"2024-11-03T10:53:13.064684Z","iopub.execute_input":"2024-11-03T10:53:13.065793Z","iopub.status.idle":"2024-11-03T10:53:13.091891Z","shell.execute_reply.started":"2024-11-03T10:53:13.065749Z","shell.execute_reply":"2024-11-03T10:53:13.090632Z"}},"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"    model  precision    recall        F1  accuracy\n0   RF cv   0.572770  0.072258  0.127872  0.825620\n0  XGB cv   0.392946  0.183962  0.250417  0.804639\n0  RF val   0.493976  0.080868  0.138983  0.822378","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>model</th>\n      <th>precision</th>\n      <th>recall</th>\n      <th>F1</th>\n      <th>accuracy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>RF cv</td>\n      <td>0.572770</td>\n      <td>0.072258</td>\n      <td>0.127872</td>\n      <td>0.825620</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>XGB cv</td>\n      <td>0.392946</td>\n      <td>0.183962</td>\n      <td>0.250417</td>\n      <td>0.804639</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>RF val</td>\n      <td>0.493976</td>\n      <td>0.080868</td>\n      <td>0.138983</td>\n      <td>0.822378</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":36},{"cell_type":"markdown","source":"#### **XGBoost**","metadata":{"id":"sfsvYD-WLERK"}},{"cell_type":"code","source":"# Use XGBoost model to predict on validation data\nxgb_val_preds = xgb_cv.best_estimator_.predict(X_val)\n\n# Get validation scores for XGBoost model\nxgb_val_scores = get_test_scores('XGB val', xgb_val_preds, y_val)\n\n# Append to the results table\nresults = pd.concat([results, xgb_val_scores], axis=0)\nresults","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":339,"status":"ok","timestamp":1685766324951,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"hYMLd0anLNW7","outputId":"5c590859-a71e-443a-8c7e-e8e2cce8aded","execution":{"iopub.status.busy":"2024-11-03T10:53:13.093416Z","iopub.execute_input":"2024-11-03T10:53:13.093815Z","iopub.status.idle":"2024-11-03T10:53:13.12771Z","shell.execute_reply.started":"2024-11-03T10:53:13.093778Z","shell.execute_reply":"2024-11-03T10:53:13.126526Z"},"trusted":true},"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"     model  precision    recall        F1  accuracy\n0    RF cv   0.572770  0.072258  0.127872  0.825620\n0   XGB cv   0.392946  0.183962  0.250417  0.804639\n0   RF val   0.493976  0.080868  0.138983  0.822378\n0  XGB val   0.365854  0.147929  0.210674  0.803497","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>model</th>\n      <th>precision</th>\n      <th>recall</th>\n      <th>F1</th>\n      <th>accuracy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>RF cv</td>\n      <td>0.572770</td>\n      <td>0.072258</td>\n      <td>0.127872</td>\n      <td>0.825620</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>XGB cv</td>\n      <td>0.392946</td>\n      <td>0.183962</td>\n      <td>0.250417</td>\n      <td>0.804639</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>RF val</td>\n      <td>0.493976</td>\n      <td>0.080868</td>\n      <td>0.138983</td>\n      <td>0.822378</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>XGB val</td>\n      <td>0.365854</td>\n      <td>0.147929</td>\n      <td>0.210674</td>\n      <td>0.803497</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":37},{"cell_type":"markdown","source":"Just like with the random forest model, the XGBoost model's validation scores were lower, but only very slightly. It is still the clear champion.","metadata":{"id":"liy_kCVUL554"}},{"cell_type":"markdown","source":"## **PACE: Execute**","metadata":{"id":"_HGsWfEOeWPm"}},{"cell_type":"markdown","source":"### **Use champion model to predict on test data**","metadata":{"id":"pfwQZbiDMGep"}},{"cell_type":"code","source":"# Use XGBoost model to predict on test data\nxgb_test_preds = xgb_cv.best_estimator_.predict(X_test)\n\n# Get test scores for XGBoost model\nxgb_test_scores = get_test_scores('XGB test', xgb_test_preds, y_test)\n\n# Append to the results table\nresults = pd.concat([results, xgb_test_scores], axis=0)\nresults","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"executionInfo":{"elapsed":274,"status":"ok","timestamp":1685766341370,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"Xv_wq5MFNESP","outputId":"eb51938a-460f-4708-ff80-f34deb6aa691","execution":{"iopub.status.busy":"2024-11-03T10:53:13.129377Z","iopub.execute_input":"2024-11-03T10:53:13.129895Z","iopub.status.idle":"2024-11-03T10:53:13.167093Z","shell.execute_reply.started":"2024-11-03T10:53:13.129851Z","shell.execute_reply":"2024-11-03T10:53:13.165845Z"},"trusted":true},"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"      model  precision    recall        F1  accuracy\n0     RF cv   0.572770  0.072258  0.127872  0.825620\n0    XGB cv   0.392946  0.183962  0.250417  0.804639\n0    RF val   0.493976  0.080868  0.138983  0.822378\n0   XGB val   0.365854  0.147929  0.210674  0.803497\n0  XGB test   0.402778  0.171598  0.240664  0.808042","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>model</th>\n      <th>precision</th>\n      <th>recall</th>\n      <th>F1</th>\n      <th>accuracy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>RF cv</td>\n      <td>0.572770</td>\n      <td>0.072258</td>\n      <td>0.127872</td>\n      <td>0.825620</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>XGB cv</td>\n      <td>0.392946</td>\n      <td>0.183962</td>\n      <td>0.250417</td>\n      <td>0.804639</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>RF val</td>\n      <td>0.493976</td>\n      <td>0.080868</td>\n      <td>0.138983</td>\n      <td>0.822378</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>XGB val</td>\n      <td>0.365854</td>\n      <td>0.147929</td>\n      <td>0.210674</td>\n      <td>0.803497</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>XGB test</td>\n      <td>0.402778</td>\n      <td>0.171598</td>\n      <td>0.240664</td>\n      <td>0.808042</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":38},{"cell_type":"markdown","source":"The recall was exactly the same as it was on the validation data, but the precision declined notably, which caused all of the other scores to drop slightly. Nonetheless, this is stil within the acceptable range for performance discrepancy between validation and test scores.","metadata":{"id":"zx58S1lKNcFd"}},{"cell_type":"markdown","source":"### **Confusion matrix**","metadata":{"id":"eCNH80Ku9TpO"}},{"cell_type":"code","source":"# Generate array of values for confusion matrix\ncm = confusion_matrix(y_test, xgb_test_preds, labels=xgb_cv.classes_)\n\n# Plot confusion matrix\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                             display_labels=['retained', 'churned'])\ndisp.plot();","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"elapsed":386,"status":"ok","timestamp":1685766350763,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"5iUyZWjWvqOd","outputId":"f518c15d-80da-44e2-bf85-08df6e75c9a9","execution":{"iopub.status.busy":"2024-11-03T10:53:13.168679Z","iopub.execute_input":"2024-11-03T10:53:13.16917Z","iopub.status.idle":"2024-11-03T10:53:13.45646Z","shell.execute_reply.started":"2024-11-03T10:53:13.169119Z","shell.execute_reply":"2024-11-03T10:53:13.455225Z"},"trusted":true},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":39},{"cell_type":"markdown","source":"The model predicted three times as many false negatives than it did false positives, and it correctly identified only 16.6% of the users who actually churned.","metadata":{"id":"pGM3eNUnO5wT"}},{"cell_type":"markdown","source":"### **Feature importance**","metadata":{"id":"XNexnwvy09PK"}},{"cell_type":"code","source":"plot_importance(xgb_cv.best_estimator_);","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"elapsed":1081,"status":"ok","timestamp":1685766378542,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"kz5T1gHc1R2x","outputId":"b23bc696-568e-4fa7-90e3-eb475dcd8e7c","execution":{"iopub.status.busy":"2024-11-03T10:53:13.457855Z","iopub.execute_input":"2024-11-03T10:53:13.458223Z","iopub.status.idle":"2024-11-03T10:53:13.887228Z","shell.execute_reply.started":"2024-11-03T10:53:13.458194Z","shell.execute_reply":"2024-11-03T10:53:13.885916Z"},"trusted":true},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":40},{"cell_type":"markdown","source":"#### **Identify an optimal decision threshold**\n\nThe default decision threshold for most implementations of classification algorithms&mdash;including scikit-learn's&mdash;is 0.5. This means that, in the case of the Waze models, if they predicted that a given user had a 50% probability or greater of churning, then that user was assigned a predicted value of `1`&mdash;the user was predicted to churn.\n\nWith imbalanced datasets where the response class is a minority, this threshold might not be ideal. You learned that a precision-recall curve can help to visualize the trade-off between your model's precision and recall.\n\nHere's the precision-recall curve for the XGBoost champion model on the test data.","metadata":{"id":"oCTOT_jmx3zQ"}},{"cell_type":"code","source":"# Plot precision-recall curve\ndisplay = PrecisionRecallDisplay.from_estimator(\n    xgb_cv.best_estimator_, X_test, y_test, name='XGBoost'\n    )\nplt.title('Precision-recall curve, XGBoost model');","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"elapsed":574,"status":"ok","timestamp":1685766417776,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"1O-wtdO4aVjQ","outputId":"b5cf5219-e732-403e-a870-bce67b466440","execution":{"iopub.status.busy":"2024-11-03T10:53:13.888558Z","iopub.execute_input":"2024-11-03T10:53:13.888909Z","iopub.status.idle":"2024-11-03T10:53:14.255342Z","shell.execute_reply.started":"2024-11-03T10:53:13.888878Z","shell.execute_reply":"2024-11-03T10:53:14.254178Z"},"trusted":true},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":41},{"cell_type":"markdown","source":"As recall increases, precision decreases. But what if you determined that false positives aren't much of a problem? For example, in the case of this Waze project, a false positive could just mean that a user who will not actually churn gets an email and a banner notification on their phone. It's very low risk.\n\nSo, what if instead of using the default 0.5 decision threshold of the model, you used a lower threshold?\n\nHere's an example where the threshold is set to 0.4:","metadata":{"id":"OKCJsLCZz-WK"}},{"cell_type":"code","source":"# Get predicted probabilities on the test data\npredicted_probabilities = xgb_cv.best_estimator_.predict_proba(X_test)\npredicted_probabilities","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":313,"status":"ok","timestamp":1685766476097,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"ZDk0uQidXPCm","outputId":"3d67df24-53ba-4dec-92c7-14fe148615b7","execution":{"iopub.status.busy":"2024-11-03T10:53:14.256532Z","iopub.execute_input":"2024-11-03T10:53:14.256851Z","iopub.status.idle":"2024-11-03T10:53:14.275822Z","shell.execute_reply.started":"2024-11-03T10:53:14.256827Z","shell.execute_reply":"2024-11-03T10:53:14.274786Z"},"trusted":true},"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"array([[0.9537133 , 0.04628669],\n       [0.81249005, 0.18750995],\n       [0.92640555, 0.07359448],\n       ...,\n       [0.542917  , 0.45708302],\n       [0.94628125, 0.05371873],\n       [0.76676714, 0.23323286]], dtype=float32)"},"metadata":{}}],"execution_count":42},{"cell_type":"markdown","source":"The `predict_proba()` method returns a 2-D array of probabilities where each row represents a user. The first number in the row is the probability of belonging to the negative class, the second number in the row is the probability of belonging to the positive class. (Notice that the two numbers in each row are complimentary to each other and sum to one.)\n\nYou can generate new predictions based on this array of probabilities by changing the decision threshold for what is considered a positive response. For example, the following code converts the predicted probabilities to {0, 1} predictions with a threshold of 0.4. In other words, any users who have a value â‰¥ 0.4 in the second column will get assigned a prediction of `1`, indicating that they churned.","metadata":{"id":"r7fHWPFP1nuK"}},{"cell_type":"code","source":"# Create a list of just the second column values (probability of target)\nprobs = [x[1] for x in predicted_probabilities]\n\n# Create an array of new predictions that assigns a 1 to any value >= 0.4\nnew_preds = np.array([1 if x >= 0.4 else 0 for x in probs])\nnew_preds","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":243,"status":"ok","timestamp":1685768361293,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"L1oUKOk01jto","outputId":"d1d26d76-c072-4c33-8d17-6e3fa3938612","execution":{"iopub.status.busy":"2024-11-03T10:53:14.277251Z","iopub.execute_input":"2024-11-03T10:53:14.277665Z","iopub.status.idle":"2024-11-03T10:53:14.293918Z","shell.execute_reply.started":"2024-11-03T10:53:14.27756Z","shell.execute_reply":"2024-11-03T10:53:14.292689Z"},"trusted":true},"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"array([0, 0, 0, ..., 1, 0, 0])"},"metadata":{}}],"execution_count":43},{"cell_type":"code","source":"# Get evaluation metrics for when the threshold is 0.4\nget_test_scores('XGB, threshold = 0.4', new_preds, y_test)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"executionInfo":{"elapsed":242,"status":"ok","timestamp":1685766484996,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"07hNA_vWX89R","outputId":"3195c5d6-5525-4ca5-b3ed-c7d164456efd","execution":{"iopub.status.busy":"2024-11-03T10:53:14.295169Z","iopub.execute_input":"2024-11-03T10:53:14.29555Z","iopub.status.idle":"2024-11-03T10:53:14.320479Z","shell.execute_reply.started":"2024-11-03T10:53:14.29551Z","shell.execute_reply":"2024-11-03T10:53:14.31944Z"},"trusted":true},"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"                  model  precision    recall        F1  accuracy\n0  XGB, threshold = 0.4   0.373219  0.258383  0.305361  0.791608","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>model</th>\n      <th>precision</th>\n      <th>recall</th>\n      <th>F1</th>\n      <th>accuracy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>XGB, threshold = 0.4</td>\n      <td>0.373219</td>\n      <td>0.258383</td>\n      <td>0.305361</td>\n      <td>0.791608</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":44},{"cell_type":"markdown","source":"Compare these numbers with the results from earlier.","metadata":{"id":"yrmt8F_u3oWo"}},{"cell_type":"code","source":"results","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"executionInfo":{"elapsed":336,"status":"ok","timestamp":1685766486536,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"1NEjKjHk3uyy","outputId":"8838fa2a-2af7-41cb-cf7a-0d0c8e7d3ed6","execution":{"iopub.status.busy":"2024-11-03T10:53:14.321719Z","iopub.execute_input":"2024-11-03T10:53:14.322079Z","iopub.status.idle":"2024-11-03T10:53:14.335122Z","shell.execute_reply.started":"2024-11-03T10:53:14.322049Z","shell.execute_reply":"2024-11-03T10:53:14.333941Z"},"trusted":true},"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"      model  precision    recall        F1  accuracy\n0     RF cv   0.572770  0.072258  0.127872  0.825620\n0    XGB cv   0.392946  0.183962  0.250417  0.804639\n0    RF val   0.493976  0.080868  0.138983  0.822378\n0   XGB val   0.365854  0.147929  0.210674  0.803497\n0  XGB test   0.402778  0.171598  0.240664  0.808042","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>model</th>\n      <th>precision</th>\n      <th>recall</th>\n      <th>F1</th>\n      <th>accuracy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>RF cv</td>\n      <td>0.572770</td>\n      <td>0.072258</td>\n      <td>0.127872</td>\n      <td>0.825620</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>XGB cv</td>\n      <td>0.392946</td>\n      <td>0.183962</td>\n      <td>0.250417</td>\n      <td>0.804639</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>RF val</td>\n      <td>0.493976</td>\n      <td>0.080868</td>\n      <td>0.138983</td>\n      <td>0.822378</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>XGB val</td>\n      <td>0.365854</td>\n      <td>0.147929</td>\n      <td>0.210674</td>\n      <td>0.803497</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>XGB test</td>\n      <td>0.402778</td>\n      <td>0.171598</td>\n      <td>0.240664</td>\n      <td>0.808042</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":45},{"cell_type":"markdown","source":"Recall and F1 score increased significantly, while precision and accuracy decreased marginally.\n\nSo, using the precision-recall curve as a guide, suppose you knew that you'd be satisfied if the model had a recall score of 0.5 and you were willing to accept the \\~30% precision score that comes with it. In other words, you'd be happy if the model successfully identified half of the people who will actually churn, even if it means that when the model says someone will churn, it's only correct about 30% of the time.\n\nWhat threshold will yield this result? There are a number of ways to determine this. Here's one way that uses a function to accomplish this.","metadata":{"id":"cvNso4XQ32vJ"}},{"cell_type":"code","source":"def threshold_finder(y_test_data, probabilities, desired_recall):\n    '''\n    Find the decision threshold that most closely yields a desired recall score.\n\n    Inputs:\n        y_test_data: Array of true y values\n        probabilities: The results of the `predict_proba()` model method\n        desired_recall: The recall that you want the model to have\n\n    Outputs:\n        threshold: The decision threshold that most closely yields the desired recall\n        recall: The exact recall score associated with `threshold`\n    '''\n    probs = [x[1] for x in probabilities]  # Isolate second column of `probabilities`\n    thresholds = np.arange(0, 1, 0.001)    # Set a grid of 1,000 thresholds to test\n\n    scores = []\n    for threshold in thresholds:\n        # Create a new array of {0, 1} predictions based on new threshold\n        preds = np.array([1 if x >= threshold else 0 for x in probs])\n        # Calculate recall score for that threshold\n        recall = recall_score(y_test_data, preds)\n        # Append the threshold and its corresponding recall score as a tuple to `scores`\n        scores.append((threshold, recall))\n\n    distances = []\n    for idx, score in enumerate(scores):\n        # Calculate how close each actual score is to the desired score\n        distance = abs(score[1] - desired_recall)\n        # Append the (index#, distance) tuple to `distances`\n        distances.append((idx, distance))\n\n    # Sort `distances` by the second value in each of its tuples (least to greatest)\n    sorted_distances = sorted(distances, key=lambda x: x[1], reverse=False)\n    # Identify the tuple with the actual recall closest to desired recall\n    best = sorted_distances[0]\n    # Isolate the index of the threshold with the closest recall score\n    best_idx = best[0]\n    # Retrieve the threshold and actual recall score closest to desired recall\n    threshold, recall = scores[best_idx]\n\n    return threshold, recall\n","metadata":{"id":"T0hCeZUzgvzb","execution":{"iopub.status.busy":"2024-11-03T10:53:14.336774Z","iopub.execute_input":"2024-11-03T10:53:14.337147Z","iopub.status.idle":"2024-11-03T10:53:14.348455Z","shell.execute_reply.started":"2024-11-03T10:53:14.337114Z","shell.execute_reply":"2024-11-03T10:53:14.347239Z"},"trusted":true},"outputs":[],"execution_count":46},{"cell_type":"markdown","source":"Now, test the function to find the threshold that results in a recall score closest to 0.5.","metadata":{"id":"Im8ghkColyQA"}},{"cell_type":"code","source":"# Get the predicted probabilities from the champion model\nprobabilities = xgb_cv.best_estimator_.predict_proba(X_test)\n\n# Call the function\nthreshold_finder(y_test, probabilities, 0.5)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10335,"status":"ok","timestamp":1685768351077,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"VADl9VsHqv9S","outputId":"1fc4ee50-092a-430f-9fc1-12d6cd10567b","execution":{"iopub.status.busy":"2024-11-03T10:53:14.349899Z","iopub.execute_input":"2024-11-03T10:53:14.350316Z","iopub.status.idle":"2024-11-03T10:53:17.812309Z","shell.execute_reply.started":"2024-11-03T10:53:14.350279Z","shell.execute_reply":"2024-11-03T10:53:17.811232Z"},"trusted":true},"outputs":[{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"(0.244, 0.5009861932938856)"},"metadata":{}}],"execution_count":47},{"cell_type":"markdown","source":"Setting a threshold of 0.124 will result in a recall of 0.503.\n\nTo verify, you can repeat the steps performed earlier to get the other evaluation metrics for when the model has a threshold of 0.124. Based on the precision-recall curve, a 0.5 recall score should have a precision of \\~0.3.","metadata":{"id":"09LHYz5pmmYq"}},{"cell_type":"code","source":"# Create an array of new predictions that assigns a 1 to any value >= 0.124\nprobs = [x[1] for x in probabilities]\nnew_preds = np.array([1 if x >= 0.124 else 0 for x in probs])\n\n# Get evaluation metrics for when the threshold is 0.124\nget_test_scores('XGB, threshold = 0.124', new_preds, y_test)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"executionInfo":{"elapsed":396,"status":"ok","timestamp":1685768368096,"user":{"displayName":"Matteo Riotto","userId":"15211004813978485634"},"user_tz":420},"id":"K-8cGALHnTwi","outputId":"b76d85e5-a10b-4e3e-a52a-d87e0f01e634","execution":{"iopub.status.busy":"2024-11-03T10:53:17.813435Z","iopub.execute_input":"2024-11-03T10:53:17.813719Z","iopub.status.idle":"2024-11-03T10:53:17.846263Z","shell.execute_reply.started":"2024-11-03T10:53:17.813695Z","shell.execute_reply":"2024-11-03T10:53:17.845079Z"},"trusted":true},"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"                    model  precision    recall        F1  accuracy\n0  XGB, threshold = 0.124   0.274255  0.708087  0.395374  0.616084","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>model</th>\n      <th>precision</th>\n      <th>recall</th>\n      <th>F1</th>\n      <th>accuracy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>XGB, threshold = 0.124</td>\n      <td>0.274255</td>\n      <td>0.708087</td>\n      <td>0.395374</td>\n      <td>0.616084</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":48}]}