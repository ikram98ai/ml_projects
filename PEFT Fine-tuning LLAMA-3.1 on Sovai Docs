{"metadata":{"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":9082365,"sourceType":"datasetVersion","datasetId":5479728}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Setting up","metadata":{}},{"cell_type":"code","source":"%%capture\n%pip install -U bitsandbytes\n%pip install -U transformers\n%pip install -U accelerate\n%pip install -U peft\n%pip install -U trl\n","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.status.busy":"2024-08-02T18:42:40.587778Z","iopub.execute_input":"2024-08-02T18:42:40.588613Z","iopub.status.idle":"2024-08-02T18:43:42.773098Z","shell.execute_reply.started":"2024-08-02T18:42:40.588554Z","shell.execute_reply":"2024-08-02T18:43:42.771854Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"from huggingface_hub import login\nlogin(\"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\")","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:43:42.775038Z","iopub.execute_input":"2024-08-02T18:43:42.775348Z","iopub.status.idle":"2024-08-02T18:43:42.916029Z","shell.execute_reply.started":"2024-08-02T18:43:42.775319Z","shell.execute_reply":"2024-08-02T18:43:42.915088Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"The token has not been saved to the git credentials helper. Pass `add_to_git_credential=True` in this function directly or `--add-to-git-credential` if using via `huggingface-cli` if you want to set the git credential as well.\nToken is valid (permission: write).\nYour token has been saved to /root/.cache/huggingface/token\nLogin successful\n","output_type":"stream"}]},{"cell_type":"code","source":"import warnings \nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:43:42.917142Z","iopub.execute_input":"2024-08-02T18:43:42.917409Z","iopub.status.idle":"2024-08-02T18:43:42.921682Z","shell.execute_reply.started":"2024-08-02T18:43:42.917386Z","shell.execute_reply":"2024-08-02T18:43:42.920652Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport os\nfrom tqdm import tqdm\nimport bitsandbytes as bnb\nimport torch,torch.nn as nn\nimport transformers\nfrom datasets import Dataset\nfrom peft import LoraConfig, PeftConfig\nfrom trl import SFTTrainer\nfrom transformers import AutoModelForCausalLM,AutoTokenizer,BitsAndBytesConfig,TrainingArguments,pipeline","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:43:42.923867Z","iopub.execute_input":"2024-08-02T18:43:42.924139Z","iopub.status.idle":"2024-08-02T18:44:00.295479Z","shell.execute_reply.started":"2024-08-02T18:43:42.924109Z","shell.execute_reply":"2024-08-02T18:44:00.294493Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stderr","text":"2024-08-02 18:43:49.846749: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-08-02 18:43:49.846859: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-08-02 18:43:49.976734: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Loading and processing the dataset","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/sovai-docs/code_prompts_balanced.csv\",sep=';',index_col = \"Unnamed: 0\")\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:44:00.296832Z","iopub.execute_input":"2024-08-02T18:44:00.297916Z","iopub.status.idle":"2024-08-02T18:44:00.333860Z","shell.execute_reply.started":"2024-08-02T18:44:00.297876Z","shell.execute_reply":"2024-08-02T18:44:00.333054Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"                                                code  \\\n0                        sov.data('wikipedia/views')   \n1                        sov.data('corprisk/events')   \n2                    sov.data('factors/alternative')   \n3  sov.data('news/daily', start_date='2017-03-30'...   \n4                    sov.data('factors/alternative')   \n\n                                         value  \n0  retrieve comprehensive Wikipedia views data  \n1      Retrieve data on corporate risk events.  \n2            Obtain alternative factor details  \n3        fetch news data for specified tickers  \n4     Fetch data on alternative market factors  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>code</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>sov.data('wikipedia/views')</td>\n      <td>retrieve comprehensive Wikipedia views data</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>sov.data('corprisk/events')</td>\n      <td>Retrieve data on corporate risk events.</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>sov.data('factors/alternative')</td>\n      <td>Obtain alternative factor details</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>sov.data('news/daily', start_date='2017-03-30'...</td>\n      <td>fetch news data for specified tickers</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>sov.data('factors/alternative')</td>\n      <td>Fetch data on alternative market factors</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Shuffle the DataFrame\ndf = df.sample(frac=1, random_state=85).reset_index(drop=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:44:00.334901Z","iopub.execute_input":"2024-08-02T18:44:00.335165Z","iopub.status.idle":"2024-08-02T18:44:00.341953Z","shell.execute_reply.started":"2024-08-02T18:44:00.335141Z","shell.execute_reply":"2024-08-02T18:44:00.341050Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"# Define the prompt generation functions\ndef generate_prompt(row):\n    return f\"\"\"Convert the description into functional and efficient code. Return only the code without any additional explanations or comments.\\n\\nDESCRIPTION:{row.value}\\n\\nCODE:{row.code}<|eot_id|>\"\"\".strip()\n\ndef generate_test_prompt(row):\n     return f\"\"\"Convert the description into functional and efficient code. Return only the code without any additional explanations or comments.\\n\\nDESCRIPTION:{row.value}\\n\\nCODE:\"\"\".strip()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:44:00.342955Z","iopub.execute_input":"2024-08-02T18:44:00.343219Z","iopub.status.idle":"2024-08-02T18:44:00.351468Z","shell.execute_reply.started":"2024-08-02T18:44:00.343196Z","shell.execute_reply":"2024-08-02T18:44:00.350582Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"# # Generate prompts for training data\ndf.loc[:,'text'] = df.apply(generate_prompt, axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:44:00.352610Z","iopub.execute_input":"2024-08-02T18:44:00.354068Z","iopub.status.idle":"2024-08-02T18:44:00.391234Z","shell.execute_reply.started":"2024-08-02T18:44:00.354042Z","shell.execute_reply":"2024-08-02T18:44:00.390571Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# Convert to datasets\nds = Dataset.from_pandas(df[[\"text\"]])\nds['text'][3]","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:44:00.392173Z","iopub.execute_input":"2024-08-02T18:44:00.392422Z","iopub.status.idle":"2024-08-02T18:44:00.420171Z","shell.execute_reply.started":"2024-08-02T18:44:00.392400Z","shell.execute_reply":"2024-08-02T18:44:00.419328Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"\"Convert the description into functional and efficient code. Return only the code without any additional explanations or comments.\\n\\nDESCRIPTION:fetch relative ratios insights for TSLA and META since 2018\\n\\nCODE:sov.data('ratios/relative', start_date='2018-01-01', tickers=['TSLA', 'META'])<|eot_id|>\""},"metadata":{}}]},{"cell_type":"markdown","source":"## Loading the model and tokenizer","metadata":{}},{"cell_type":"code","source":"base_model_name = \"meta-llama/Meta-Llama-3-8B-Instruct\"","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:44:00.423951Z","iopub.execute_input":"2024-08-02T18:44:00.424204Z","iopub.status.idle":"2024-08-02T18:44:00.427777Z","shell.execute_reply.started":"2024-08-02T18:44:00.424183Z","shell.execute_reply":"2024-08-02T18:44:00.426983Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"bnb_config = BitsAndBytesConfig(\n    load_in_4bit=True,\n    bnb_4bit_use_double_quant=False,\n    bnb_4bit_quant_type=\"nf4\",\n    bnb_4bit_compute_dtype=\"float16\",\n)\n\nmodel = AutoModelForCausalLM.from_pretrained(\n    base_model_name,\n    device_map=\"auto\",\n    torch_dtype=\"float16\",\n    quantization_config=bnb_config, \n)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:44:00.428782Z","iopub.execute_input":"2024-08-02T18:44:00.429065Z","iopub.status.idle":"2024-08-02T18:46:09.033549Z","shell.execute_reply.started":"2024-08-02T18:44:00.429024Z","shell.execute_reply":"2024-08-02T18:46:09.032767Z"},"trusted":true},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/654 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"031e18f4660840c0866653441e79ee70"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors.index.json:   0%|          | 0.00/23.9k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"711b4116e46f470b8ff61537f59c5cc3"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading shards:   0%|          | 0/4 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3a33bf2f1c374cbfab2a2ee8e007d6c2"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model-00001-of-00004.safetensors:   0%|          | 0.00/4.98G [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3cce1e2550bf46f8b8b71c0a5fc4ade5"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model-00002-of-00004.safetensors:   0%|          | 0.00/5.00G [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"312ff85dc37d4cce969f6aa700bb28a2"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model-00003-of-00004.safetensors:   0%|          | 0.00/4.92G [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"686c9711ff2c4b83891e1152c8f061b7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model-00004-of-00004.safetensors:   0%|          | 0.00/1.17G [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d4e10b5604e6430e90548c7165342234"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5d5576222eb54e2f8ffb913808190c04"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"generation_config.json:   0%|          | 0.00/187 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f741010f8be64ba8af93cedf38005b50"}},"metadata":{}}]},{"cell_type":"code","source":"model.config.use_cache = False\nmodel.config.pretraining_tp = 1","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:46:09.034683Z","iopub.execute_input":"2024-08-02T18:46:09.034969Z","iopub.status.idle":"2024-08-02T18:46:09.039249Z","shell.execute_reply.started":"2024-08-02T18:46:09.034945Z","shell.execute_reply":"2024-08-02T18:46:09.038432Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"tokenizer = AutoTokenizer.from_pretrained(base_model_name)\n\ntokenizer.pad_token_id = tokenizer.eos_token_id","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:46:09.040339Z","iopub.execute_input":"2024-08-02T18:46:09.040615Z","iopub.status.idle":"2024-08-02T18:46:10.653025Z","shell.execute_reply.started":"2024-08-02T18:46:09.040574Z","shell.execute_reply":"2024-08-02T18:46:10.652000Z"},"trusted":true},"execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/51.0k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"49821aa58aa646d6a236c617d1e6365d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/9.09M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"00812362599f47a6a8bd7dd92b7bbd16"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/73.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7090f1f359ea43f38596fdf60ef3e5b5"}},"metadata":{}}]},{"cell_type":"code","source":"tokenizer.eos_token","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:46:10.654230Z","iopub.execute_input":"2024-08-02T18:46:10.654497Z","iopub.status.idle":"2024-08-02T18:46:10.660463Z","shell.execute_reply.started":"2024-08-02T18:46:10.654474Z","shell.execute_reply":"2024-08-02T18:46:10.659652Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"'<|eot_id|>'"},"metadata":{}}]},{"cell_type":"markdown","source":"### **Few-shot prompt** ","metadata":{}},{"cell_type":"code","source":"pipe = pipeline(task=\"text-generation\", \n                model=model,\n                tokenizer=tokenizer, \n                max_new_tokens=64, \n                temperature=0.1)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:46:10.661682Z","iopub.execute_input":"2024-08-02T18:46:10.662023Z","iopub.status.idle":"2024-08-02T18:46:10.671078Z","shell.execute_reply.started":"2024-08-02T18:46:10.661988Z","shell.execute_reply":"2024-08-02T18:46:10.670340Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"prompt=''\nfor p in df.loc[:3,'text']:\n    prompt+=p+\"\\n\\n\"\n\nprompt+=generate_test_prompt(df.iloc[10])\nprompt","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:46:10.672254Z","iopub.execute_input":"2024-08-02T18:46:10.672958Z","iopub.status.idle":"2024-08-02T18:46:10.684063Z","shell.execute_reply.started":"2024-08-02T18:46:10.672924Z","shell.execute_reply":"2024-08-02T18:46:10.683258Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"\"Convert the description into functional and efficient code. Return only the code without any additional explanations or comments.\\n\\nDESCRIPTION:Investigate potential accounting misstatements or fraud risks\\n\\nCODE:sov.data('corprisk/accounting')<|eot_id|>\\n\\nConvert the description into functional and efficient code. Return only the code without any additional explanations or comments.\\n\\nDESCRIPTION:Obtain corporate risk details\\n\\nCODE:sov.data('corprisk/risks')<|eot_id|>\\n\\nConvert the description into functional and efficient code. Return only the code without any additional explanations or comments.\\n\\nDESCRIPTION:retrieve relative ratios for TSLA and META from 2018\\n\\nCODE:sov.data('ratios/relative', start_date='2018-01-01', tickers=['TSLA', 'META'])<|eot_id|>\\n\\nConvert the description into functional and efficient code. Return only the code without any additional explanations or comments.\\n\\nDESCRIPTION:fetch relative ratios insights for TSLA and META since 2018\\n\\nCODE:sov.data('ratios/relative', start_date='2018-01-01', tickers=['TSLA', 'META'])<|eot_id|>\\n\\nConvert the description into functional and efficient code. Return only the code without any additional explanations or comments.\\n\\nDESCRIPTION:Access past weekly financial performance for major firms from 2018\\n\\nCODE:\""},"metadata":{}}]},{"cell_type":"code","source":"result = pipe(prompt)[0]['generated_text']","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:46:10.685040Z","iopub.execute_input":"2024-08-02T18:46:10.685351Z","iopub.status.idle":"2024-08-02T18:46:14.204545Z","shell.execute_reply.started":"2024-08-02T18:46:10.685321Z","shell.execute_reply":"2024-08-02T18:46:14.203774Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"print(generate_test_prompt(df.iloc[10]))\n'sov'+result.split('sov')[1]#.split('CODE:')[-1]","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:46:14.205716Z","iopub.execute_input":"2024-08-02T18:46:14.206029Z","iopub.status.idle":"2024-08-02T18:46:14.212828Z","shell.execute_reply.started":"2024-08-02T18:46:14.206003Z","shell.execute_reply":"2024-08-02T18:46:14.212033Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"Convert the description into functional and efficient code. Return only the code without any additional explanations or comments.\n\nDESCRIPTION:Access past weekly financial performance for major firms from 2018\n\nCODE:\n","output_type":"stream"},{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"\"sov.data('corprisk/accounting')<|eot_id|>\\n\\nConvert the description into functional and efficient code. Return only the code without any additional explanations or comments.\\n\\nDESCRIPTION:Obtain corporate risk details\\n\\nCODE:\""},"metadata":{}}]},{"cell_type":"markdown","source":"## Extracting the linear modules names","metadata":{}},{"cell_type":"code","source":"def find_all_linear_names(model):\n    cls = bnb.nn.Linear4bit\n    lora_module_names = set()\n    for name, module in model.named_modules():\n        if isinstance(module, cls):\n            names = name.split('.')\n            lora_module_names.add(names[0] if len(names) == 1 else names[-1])\n    if 'lm_head' in lora_module_names:  # needed for 16 bit\n        lora_module_names.remove('lm_head')\n    return list(lora_module_names)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:46:14.213958Z","iopub.execute_input":"2024-08-02T18:46:14.214227Z","iopub.status.idle":"2024-08-02T18:46:14.222210Z","shell.execute_reply.started":"2024-08-02T18:46:14.214204Z","shell.execute_reply":"2024-08-02T18:46:14.221449Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"modules = find_all_linear_names(model)\nmodules","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:46:14.223179Z","iopub.execute_input":"2024-08-02T18:46:14.223467Z","iopub.status.idle":"2024-08-02T18:46:14.238160Z","shell.execute_reply.started":"2024-08-02T18:46:14.223443Z","shell.execute_reply":"2024-08-02T18:46:14.237304Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"['up_proj', 'k_proj', 'v_proj', 'down_proj', 'gate_proj', 'q_proj', 'o_proj']"},"metadata":{}}]},{"cell_type":"markdown","source":"## Setting up the model","metadata":{}},{"cell_type":"code","source":"output_dir=\"llama-3.1-fine-tuned-model-on-sovai-doc\"\n\npeft_config = LoraConfig(\n    lora_alpha=16,\n    lora_dropout=0,\n    r=64,\n    bias=\"none\",\n    task_type=\"CAUSAL_LM\",\n    target_modules=modules,\n)\n\ntraining_arguments = TrainingArguments(\n    output_dir='.',                    # directory to save and repository id\n    num_train_epochs=1,                       # number of training epochs\n    per_device_train_batch_size=1,            # batch size per device during training\n    gradient_accumulation_steps=8,            # number of steps before performing a backward/update pass\n    gradient_checkpointing=True,              # use gradient checkpointing to save memory\n    optim=\"paged_adamw_32bit\",\n    logging_steps=10,                         \n    learning_rate=2e-4,                       # learning rate, based on QLoRA paper\n    weight_decay=0.001,\n    fp16=True,\n    bf16=False,\n    max_grad_norm=0.3,                        # max gradient norm based on QLoRA paper\n    max_steps=-1,\n    warmup_ratio=0.03,                        # warmup ratio based on QLoRA paper\n    group_by_length=False,\n    lr_scheduler_type=\"cosine\",               # use cosine learning rate scheduler\n#     eval_strategy=\"steps\",              # save checkpoint every epoch\n    eval_steps = 0.2,\n    report_to='none',\n    push_to_hub=True\n)\n\ntrainer = SFTTrainer(\n    model=model,\n    args=training_arguments,\n    train_dataset=ds,\n#     eval_dataset=eval_data,\n    peft_config=peft_config,\n    dataset_text_field=\"text\",\n    tokenizer=tokenizer,\n    max_seq_length=512,\n    packing=False,\n    dataset_kwargs={\n    \"add_special_tokens\": False,\n    \"append_concat_token\": False,\n    }\n)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:46:14.241064Z","iopub.execute_input":"2024-08-02T18:46:14.241837Z","iopub.status.idle":"2024-08-02T18:46:17.742346Z","shell.execute_reply.started":"2024-08-02T18:46:14.241793Z","shell.execute_reply":"2024-08-02T18:46:17.741561Z"},"trusted":true},"execution_count":26,"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/1026 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7497895bcc4c494f9bdf70547deb8ee3"}},"metadata":{}}]},{"cell_type":"markdown","source":"## Model Training","metadata":{}},{"cell_type":"code","source":"# Train model\ntrainer.train()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:46:17.743435Z","iopub.execute_input":"2024-08-02T18:46:17.743786Z","iopub.status.idle":"2024-08-02T19:05:19.719402Z","shell.execute_reply.started":"2024-08-02T18:46:17.743754Z","shell.execute_reply":"2024-08-02T19:05:19.718459Z"},"trusted":true},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='128' max='128' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [128/128 18:28, Epoch 0/1]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>10</td>\n      <td>2.920300</td>\n    </tr>\n    <tr>\n      <td>20</td>\n      <td>0.882000</td>\n    </tr>\n    <tr>\n      <td>30</td>\n      <td>0.611500</td>\n    </tr>\n    <tr>\n      <td>40</td>\n      <td>0.499400</td>\n    </tr>\n    <tr>\n      <td>50</td>\n      <td>0.463800</td>\n    </tr>\n    <tr>\n      <td>60</td>\n      <td>0.447800</td>\n    </tr>\n    <tr>\n      <td>70</td>\n      <td>0.448000</td>\n    </tr>\n    <tr>\n      <td>80</td>\n      <td>0.405600</td>\n    </tr>\n    <tr>\n      <td>90</td>\n      <td>0.372700</td>\n    </tr>\n    <tr>\n      <td>100</td>\n      <td>0.413100</td>\n    </tr>\n    <tr>\n      <td>110</td>\n      <td>0.368500</td>\n    </tr>\n    <tr>\n      <td>120</td>\n      <td>0.363000</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"TrainOutput(global_step=128, training_loss=0.6631644256412983, metrics={'train_runtime': 1117.9912, 'train_samples_per_second': 0.918, 'train_steps_per_second': 0.114, 'total_flos': 2162043204108288.0, 'train_loss': 0.6631644256412983, 'epoch': 0.9980506822612085})"},"metadata":{}}]},{"cell_type":"code","source":"trainer.push_to_hub('ikram98ai/llama-sovai-doc')","metadata":{"execution":{"iopub.status.busy":"2024-08-02T19:05:19.720545Z","iopub.execute_input":"2024-08-02T19:05:19.721132Z","iopub.status.idle":"2024-08-02T19:05:25.773497Z","shell.execute_reply.started":"2024-08-02T19:05:19.721104Z","shell.execute_reply":"2024-08-02T19:05:25.772646Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"CommitInfo(commit_url='https://huggingface.co/snowdere/working/commit/48ecc9d15aae80c8780852e1ee4d7ecd6394850f', commit_message='ikram98ai/llama-sovai-doc', commit_description='', oid='48ecc9d15aae80c8780852e1ee4d7ecd6394850f', pr_url=None, pr_revision=None, pr_num=None)"},"metadata":{}}]},{"cell_type":"markdown","source":"## Saving the model and tokenizer","metadata":{}},{"cell_type":"code","source":"# # Save trained model and tokenizer\n# trainer.save_model(output_dir)\n# tokenizer.save_pretrained(output_dir)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T19:05:25.774679Z","iopub.execute_input":"2024-08-02T19:05:25.775004Z","iopub.status.idle":"2024-08-02T19:05:25.779172Z","shell.execute_reply.started":"2024-08-02T19:05:25.774977Z","shell.execute_reply":"2024-08-02T19:05:25.778384Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"markdown","source":"## Testing model after fine-tuning ","metadata":{}},{"cell_type":"code","source":"# from peft import PeftModel, PeftConfig\n# from transformers import AutoModelForCausalLM\n\n# config = PeftConfig.from_pretrained(\"ikram98ai/working\")\n# base_model = AutoModelForCausalLM.from_pretrained(\"meta-llama/Meta-Llama-3-8B-Instruct\")\n# peft_model = PeftModel.from_pretrained(base_model, \"ikram98ai/working\")","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:42:35.695150Z","iopub.status.idle":"2024-08-02T18:42:35.695558Z","shell.execute_reply.started":"2024-08-02T18:42:35.695346Z","shell.execute_reply":"2024-08-02T18:42:35.695364Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# pipe = pipeline(task=\"text-generation\", \n#                     model=peft_model,\n#                     tokenizer=tokenizer, \n#                     max_new_tokens=32, \n#                     temperature=0.1)\n# y_pred = []\n# for i in tqdm(range(5)):\n#     prompt = generate_test_prompt(df.iloc[i])\n#     result = pipe(prompt)\n#     answer = result[0]['generated_text']\n#     y_pred.append(answer)\n    \n# for true_code,model_code in list(zip(df.iloc[:5]['code'],y_pred)):\n#     print('\\nReal Code: ',true_code)\n#     print('\\nModel Code: ','sov'+model_code.split('sov')[1])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}